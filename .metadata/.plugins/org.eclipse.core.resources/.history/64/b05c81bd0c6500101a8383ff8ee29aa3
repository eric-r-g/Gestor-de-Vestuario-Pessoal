package looks;

import erros.ArrayCheiaException;
import erros.ArrayVaziaException;
import erros.ElementoExistenteException;
import erros.ElementoInexistenteException;

import java.util.ArrayList;

public class RepositorioLooks {
	private ArrayList <Look> itens;
	private final int tamanhoMax;
	
	public RepositorioLooks() {
		tamanhoMax = 100;
		itens = new ArrayList <Look>();
	}
	
	public RepositorioLook(int tamMax) {
		tamanhoMax = tamMax;
		itens = new ArrayList <Look>();
	}
	
	public int getTamanho() { return itens.size(); }
	public ArrayList<Item> getItens() { return itens; }

	public void inserirItem(Item novo) throws ArrayCheiaException, ElementoExistenteException {
		if (itens.size() == tamanhoMax) {
			throw new ArrayCheiaException("Array está vazia");			
		}
		for(Item item : itens) {
			if(item.equals(novo)) {
				throw new ElementoExistenteException("Elemento já existente");
			}
		}
		itens.add(novo);
	}
	
	public void removerItem(Item item) throws ElementoInexistenteException, ArrayVaziaException {
		if (itens.size() == 0) {
			throw new ElementoInexistenteException("Array está vazia");	
		}
		boolean remocao = false;
		
		for(int i = 0; i < itens.size(); ++i) {
			if (itens.get(i).equals(item)) {
				itens.remove(i);
				break;
			}
		}
		
		if(!remocao) {
			throw new ElementoInexistenteException("Item inexistente");		
		}
	}
	
	public void utilizarLook(Look look) {
		if (getTamanho() == 0) {
			// subir erro de impossivel de utilizar
		}
		boolean utilizar = false;
		for(int i = 0; i < getTamanho(); ++i) {
			if (looks.get(i).equals(look)) {
				// acao de utilizar o look
				utilizar = true;
				break;
			}
		}
		
		if(!utilizar) {
			//subir erro de look não existir
		}
	}
}