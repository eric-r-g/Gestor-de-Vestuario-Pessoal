package managers;

import java.sql.*;

import erros.ElementoInexistenteException;
import itens.*;

public class BDManager {
	private String arquivoBanco = "banco.db";
	private String url = "jdbc:sqlite:" + arquivoBanco;
	private Connection conn;
	

	public BDManager() {
		int i = 5;
		while(i-- > 0){ // tenta se conectar até 5 vezes
			try {
				// conecta ao sqlte
				conn = DriverManager.getConnection(url);
	            Statement stmt = conn.createStatement();
	            
	            // criação dos bancos (se não existirem)
	            String sqlItens = "CREATE TABLE IF NOT EXISTS itens ("
	                    + "id TEXT PRIMARY KEY,"
	                    + "tipo TEXT NOT NULL,"
	                    + "modelo TEXT NOT NULL,"
	                    + "loja_origem TEXT NOT NULL,"
	                    + "estado_conservacao TEXT NOT NULL,"
	                    + "preco REAL NOT NULL,"
	                    + "numeracao INTEGER,"
	                    + "tamanho INTEGER,"
	                    + "material TEXT,"
	                    + "externo INTEGER)";
	           
	            
	            String sqlLooks = "CREATE TABLE IF NOT EXISTS looks ("
	                    + "id TEXT PRIMARY KEY,"
	                    + "id_superior TEXT,"
	                    + "id_inferior TEXT,"
	            		+ "id_unica TEXT,"
	            		+ "id_calcado TEXT,"
	            		+ "id_acessorio TEXT)";
	            
	            String sqlEmprestimos = "CREATE TABLE IF NOT EXISTS emprestimos ("
	                    + "id TEXT PRIMARY KEY,"
	                    + "data TEXT NOT NULL,"
	            		+ "nome TEXT NOT NULL)";

	            
	            // execução dos statements
	            stmt.execute(sqlItens);
	            stmt.execute(sqlLooks);
	            stmt.execute(sqlEmprestimos);
				break;
	        } catch (SQLException e) {
	            System.err.println("Erro ao criar o arquivo SQLite: " + e.getMessage());
	        }
		}
	}
	
	public void inserirItem(Item item) throws SQLException {
		try {
			String sql = "INSERT OR IGNORE INTO itens (id, tipo, modelo, loja_origem, estado_conservacao, preco, numeracao, tamanho, material, externo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			
			String tipo = item.getTipo();
			
			pstmt.setString(1, item.getId().toString());
			pstmt.setString(2, tipo);
			pstmt.setString(3, item.getModelo());
			pstmt.setString(4, item.getLojaOrigem());
			pstmt.setString(5, item.getConservacao().toString());
			pstmt.setDouble(6, item.getPreco());
			
			switch(tipo) {
				case "acessorio" -> pstmt.setString(9, ((Acessorio) item).getMaterial());
				case "calcado" -> pstmt.setInt(7, ((Calcado) item).getNumeracao());
				case "inferior" -> pstmt.setInt(8, ((PecaInferior) item).getTamanho());
				case "unica" -> pstmt.setInt(8, ((PecaUnica) item).getTamanho());
				case "intima" -> pstmt.setInt(8, ((RoupaIntima) item).getTamanho());
				case "superior" -> {
					pstmt.setInt(8, ((PecaSuperior) item).getTamanho());
					if(((PecaSuperior) item).isExterno()){
						pstmt.setInt(10, 1);
					} else {
						pstmt.setInt(10, 0);
					}
				}
			}

            pstmt.executeUpdate();
			
		} catch (SQLException e) {
			throw e;
		}
	}
	

	public ResultSet listarItens() throws SQLException {
		try {
			String sql = "SELECT * FROM itens";
			Statement stmt = conn.createStatement();
			return stmt.executeQuery(sql);
		} catch (SQLException e) {
			throw e;		
		}

	}
	
	public void removerItem(Item item) throws SQLException, ElementoInexistenteException {
		String sql = "DELETE FROM itens WHERE id = ?";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setString(1, item.getId().toString());
		
		int retorno = pstmt.executeUpdate();
        
        if (retorno < 1) {
        	throw new ElementoInexistenteException("elemento não presente no BD");
        }
	}
	
	public void atualizarItem(Item item) throws SQLException {
		String sql = "UPDATE itens SET tipo = ?, modelo = ?, loja_origem = ?, estado_conservacao = ?, preco = ?, numeracao = ?, tamanho = ?, material = ?, externo = ? WHERE id = ?";

		try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
			pstmt.setString(1, item.getTipo());
			pstmt.setString(2, item.getModelo());
			pstmt.setString(3, item.getLojaOrigem());
			pstmt.setString(4, item.getConservacao().toString());
			pstmt.setDouble(5, item.getPreco());

			pstmt.setNull(6, Types.INTEGER); // numeracao
			pstmt.setNull(7, Types.INTEGER); // tamanho
			pstmt.setNull(8, Types.VARCHAR); // material
			pstmt.setNull(9, Types.INTEGER); // externo

			switch (item.getTipo()) {
				case "calcado" -> pstmt.setInt(6, ((Calcado) item).getNumeracao());
				case "superior" -> {
					pstmt.setInt(7, ((PecaSuperior) item).getTamanho());
					pstmt.setInt(9, ((PecaSuperior) item).isExterno() ? 1 : 0);
				}
				case "inferior" -> pstmt.setInt(7, ((PecaInferior) item).getTamanho());
				case "unica" -> pstmt.setInt(7, ((PecaUnica) item).getTamanho());
				case "intima" -> pstmt.setInt(7, ((RoupaIntima) item).getTamanho());
				case "acessorio" -> pstmt.setString(8, ((Acessorio) item).getMaterial());
			}

			pstmt.setString(10, item.getId().toString());
			pstmt.executeUpdate();
		}
	}
	
	public void inserirLook(Look look) throws SQLException {
		try {
			String sql = "INSERT INTO looks (id, id_superior, id_inferior, id_unica, id_calcado, id_acessorio) VALUES (?, ?, ?, ?, ?, ?)";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, look.getId().toString());
			if (look.getSuperior() != null) {
				pstmt.setString(2, look.getSuperior().getId().toString());
			}
			if (look.getInferior() != null) {
				pstmt.setString(3, look.getInferior().getId().toString());
			}
			if (look.getUnica() != null) {
				pstmt.setString(4, look.getUnica().getId().toString());
			} 
			if (look.getCalcado() != null) {
				pstmt.setString(5, look.getCalcado().getId().toString());
			}
			if (look.getAcessorio() != null) {
				pstmt.setString(6, look.getAcessorio().getId().toString());
			}
			
			

            pstmt.executeUpdate();
			
		} catch (SQLException e) {
			throw e;
		}
	}
	

	public ResultSet listarLooks() throws SQLException {
		try {
			String sql = "SELECT * FROM looks";
			Statement stmt = conn.createStatement();
			return stmt.executeQuery(sql);
		} catch (SQLException e) {
			throw e;		
		}

	}
	
	public void removerLook(Look look) throws SQLException, ElementoInexistenteException {
		String sql = "DELETE FROM looks WHERE id = ?";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setString(1, look.getId().toString());
		
		int retorno = pstmt.executeUpdate();
        
        if (retorno < 1) {
        	throw new ElementoInexistenteException("elemento não presente no BD");
        }
	}
	
	public void atualizarLook(Look look) throws SQLException {
		String sql = "UPDATE looks SET id_superior = ?, id_inferior = ?, id_unica = ?, id_calcado = ?, id_acessorio = ? WHERE id = ?";

		try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
			
			if (look.getSuperior() != null) {
				pstmt.setString(1, look.getSuperior().getId().toString());
			}
			if (look.getInferior() != null) {
				pstmt.setString(2, look.getInferior().getId().toString());
			}
			if (look.getUnica() != null) {
				pstmt.setString(3, look.getUnica().getId().toString());
			} 
			if (look.getCalcado() != null) {
				pstmt.setString(4, look.getCalcado().getId().toString());
			}
			if (look.getAcessorio() != null) {
				pstmt.setString(5, look.getAcessorio().getId().toString());
			}
			
			pstmt.setString(6, look.getId().toString());
			pstmt.executeUpdate();
		}
	}
	
	public void inserirEmprestavel(IEmprestavel item) throws SQLException {
		try {
			String sql = "INSERT OR IGNORE INTO emprestimos (id, data, nome) VALUES (?, ?, ?)";
			PreparedStatement pstmt = conn.prepareStatement(sql);
			
			pstmt.setString(1, item.getId().toString());
			pstmt.setString(2, item.dataDeEmprestimo().toString());
			pstmt.setString(3, item.getNomeEmprestimo());
	
            pstmt.executeUpdate();
			
		} catch (SQLException e) {
			throw e;
		}
	}
	

	public ResultSet listarEmprestavel() throws SQLException {
		try {
			String sql = "SELECT * FROM emprestimos";
			Statement stmt = conn.createStatement();
			return stmt.executeQuery(sql);
		} catch (SQLException e) {
			throw e;		
		}

	}
	
	public void removerEmprstavel(IEmprestavel item) throws SQLException, ElementoInexistenteException {
		String sql = "DELETE FROM emprestimos WHERE id = ?";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setString(1, item.getId().toString());
		
		int retorno = pstmt.executeUpdate();
        
        if (retorno < 1) {
        	throw new ElementoInexistenteException("elemento não presente no BD");
        }
	}
	
	public void atualizarEmprestavel(IEmprestavel item) throws SQLExclookseption {
		String sql = "UPDATE emprestimos SET data = ?, nome = ? WHERE id = ?";

		try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
			
			pstmt.setString(1, item.dataDeEmprestimo().toString());
			pstmt.executeUpdate();
		}
	}
}
