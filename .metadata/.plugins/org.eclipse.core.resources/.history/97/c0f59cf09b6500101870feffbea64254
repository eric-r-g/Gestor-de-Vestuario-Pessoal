package interfaceGrafica;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.HashMap;

import itens.Item.estadosConservacao;
import itens.Item.tipoItem;
import managers.ItemManager;
import erros.EntradaInvalidaException;

public class JanelaItensAdd extends ModeloPagina{
	private static final long serialVersionUID = 1L;
	private GerenciadorPaginas gerenciador;
	private ItemManager itemManager;
	private JComboBox <estadosConservacao> dropdownConservacao;
	private JComboBox <tipoItem> dropdownTipo;
	private JTextField formModelo;
	private JTextField formLojaOrigem;
	private JTextField formPreco;
	private JTextField formTamanho;
	private JTextField formMaterial;
	private JTextField formNumeracao;
	private JFileChooser formImagem;
	private JRadioButton botaoSim;
	private JRadioButton botaoNao;
	private JButton botaoSubmeter;
	private JPanel painelFormulario;
	private ButtonGroup formExterno;
	
	public JanelaItensAdd(GerenciadorPaginas gerenciador, ItemManager itemManager) {
		super(gerenciador);
		this.gerenciador = gerenciador;
		this.itemManager = itemManager;
		
		configurarContentPane();
	}
	
	private String limparForm(Object entrada) {
		return ((String) entrada).strip().toLowerCase();
	}
	
	protected void atualizarFormulario(tipoItem tipo) {
		painelFormulario.removeAll();
		
		painelFormulario.add(new JLabel("tipo"));
		painelFormulario.add(dropdownTipo);
		
		painelFormulario.add(new JLabel("conservacao"));
		painelFormulario.add(dropdownConservacao);
		
		painelFormulario.add(new JLabel("preco"));
		painelFormulario.add(formPreco);
		
		painelFormulario.add(new JLabel("Modelo"));
		painelFormulario.add(formModelo);
		
		painelFormulario.add(new JLabel("LojaOrigem"));
		painelFormulario.add(formLojaOrigem);
		//painelFormulario.add(formImagem);
		
	
		if(!(tipo == null)) {
			if(tipo.equals(tipoItem.ACESSORIO)) {
				painelFormulario.add(new JLabel("material"));
				painelFormulario.add(formMaterial);
			} else if(tipo.equals(tipoItem.CALCADO)) {
				painelFormulario.add(new JLabel("numercao"));
				painelFormulario.add(formNumeracao);
			} else if(tipo.equals(tipoItem.INFERIOR)) {
				painelFormulario.add(new JLabel("tamanho"));
				painelFormulario.add(formTamanho);
			} else if(tipo.equals(tipoItem.SUPERIOR)) {
				painelFormulario.add(new JLabel("tamanho"));
				painelFormulario.add(formTamanho);
				painelFormulario.add(new JLabel("externo?"));
				painelFormulario.add(botaoSim);
				painelFormulario.add(botaoNao);
			} else if(tipo.equals(tipoItem.UNICA)) {
				painelFormulario.add(new JLabel("tamanho"));
				painelFormulario.add(formTamanho);
			} else if(tipo.equals(tipoItem.INTIMA)) {
				painelFormulario.add(new JLabel("tamanho"));
				painelFormulario.add(formTamanho);
			}
		}
		
		painelFormulario.add(botaoSubmeter);
		
    	painelFormulario.revalidate();	  
    	painelFormulario.repaint();  
	}
	
	protected void configurarContentPane() {
		contentPane.setLayout(new BoxLayout(contentPane, BoxLayout.Y_AXIS));
		contentPane.setBackground(Color.WHITE);
		
		// painel superior
		JPanel painelSuperior = new JPanel(new BorderLayout());
		painelSuperior.setBorder(BorderFactory.createEmptyBorder(50, 40, 100, 40));
		painelSuperior.setBackground(Color.WHITE);
		
		// titulo
		JLabel labelTitulo = new JLabel("Adicionar Item");
		labelTitulo.setFont(new Font("Arial", Font.PLAIN, 24));
		painelSuperior.add(labelTitulo, BorderLayout.WEST);
		
		// botão de voltar
		JButton botaoVoltar = new JButton("voltar");
		botaoVoltar.addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent e) {
                gerenciador.mostrarTela("TELA_ITENS_LISTAR");
            }
        });
		painelSuperior.add(botaoVoltar, BorderLayout.EAST);
		
		// painel listagem 
		painelFormulario = new JPanel();
        painelFormulario.setBackground(Color.GRAY);
        painelFormulario.setLayout(new BoxLayout(painelFormulario, BoxLayout.Y_AXIS)); // Layout vertical
        painelFormulario.setBorder(BorderFactory.createEmptyBorder(20, 10, 10, 10));
        painelFormulario.setPreferredSize(new Dimension(800, 800));
        painelFormulario.setMaximumSize(new Dimension(800, 800));
		
		// campo conservação
		dropdownConservacao = new JComboBox<>(estadosConservacao.values());
		dropdownConservacao.setMaximumSize(new Dimension(300, 30));
		// campo modelo
		formModelo = new JTextField();
		formModelo.setPreferredSize(new Dimension(300, 30));
		formModelo.setMaximumSize(new Dimension(300, 30));
		
		// campo loja
		formLojaOrigem = new JTextField();
		formLojaOrigem.setPreferredSize(new Dimension(300, 30));
		formLojaOrigem.setMaximumSize(new Dimension(300, 30));
		
		// campo preco
		formPreco = new JTextField();
		formPreco.setPreferredSize(new Dimension(300, 30));
		formPreco.setMaximumSize(new Dimension(300, 30));
		
		formTamanho = new JTextField();
		formTamanho.setPreferredSize(new Dimension(300, 30));
		formTamanho.setMaximumSize(new Dimension(300, 30));
		
		formMaterial = new JTextField();
		formMaterial.setPreferredSize(new Dimension(300, 30));
		formMaterial.setMaximumSize(new Dimension(300, 30));
		
		formNumeracao = new JTextField();
		formNumeracao.setPreferredSize(new Dimension(300, 30));
		formNumeracao.setMaximumSize(new Dimension(300, 30));

		formImagem = new JFileChooser();
		
		formExterno = new ButtonGroup();
		botaoSim = new JRadioButton("sim");
		formExterno.add(botaoSim);
		
		botaoNao = new JRadioButton("não");		
		formExterno.add(botaoNao);
		
		botaoSubmeter = new JButton("submeter");
		botaoSubmeter.setPreferredSize(new Dimension(300, 30));
		
        // campo tipo
		dropdownTipo = new JComboBox<>(tipoItem.values());
		dropdownTipo.setMaximumSize(new Dimension(300, 30));
		dropdownTipo.addItemListener(new ItemListener() {
		    public void itemStateChanged(ItemEvent e) {
		    	tipoItem tipo = (tipoItem) dropdownTipo.getSelectedItem();
		    	
		    	atualizarFormulario(tipo);
		    }
		});
		
		
		botaoSubmeter.addMouseListener(new MouseAdapter() {
        	public void mouseClicked(MouseEvent e) {
        		try {
        			tipoItem tipo = (tipoItem) dropdownTipo.getSelectedItem();
	                estadosConservacao conservacao = (estadosConservacao) dropdownConservacao.getSelectedItem();
	                String modelo = limparForm(formModelo.getText());
	                String lojaOrigem = limparForm(formLojaOrigem.getText());
	                Double preco = 0.0;
	                
	                try {
	                	preco = Double.parseDouble(formPreco.getText());
	                } catch (Exception erro) {
	                	throw (new EntradaInvalidaException("Form do double não está valido"));
	                }
	                if (modelo.isBlank()) {
	                	throw (new EntradaInvalidaException("Form do modelo está vazio"));
	                }
	                else if (lojaOrigem.isBlank()) {
	                	throw (new EntradaInvalidaException("Form da loja de origem está vazio"));
	                }
	                HashMap<String, String> extras = new HashMap<String, String>();
	                // ToDO: entrada de imagens
	                // ToDo: entradas especificas dos itens
	                itemManager.adicionar(tipo, modelo, lojaOrigem, conservacao, preco, extras);
	                itemManager.atualizarBD();
        		} catch (EntradaInvalidaException erro) {
        			//ToDo: tratamento de erro
        		}
            }
        });
		
		atualizarFormulario(tipoItem.ACESSORIO);
		contentPane.add(painelSuperior);
		contentPane.add(painelFormulario);
	}
}
