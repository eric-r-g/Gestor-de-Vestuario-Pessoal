package managers;

import java.sql.ResultSet;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.UUID;

import erros.*;
import itens.IEmprestavel;
import repositorios.RepositorioEmprestimo;

public class EmprestimoManager extends ManagerBase <IEmprestavel> {
	 private BDManager bdManager;
	 public EmprestimoManager(BDManager bdManager) {
		 super(new RepositorioEmprestimo(100));
		 this.bdManager = bdManager;
		 
		 inicializarDados();
	 }
	 
	 public int tamanhoRepositorio() { return repositorio.getTamanho(); }
	 public ArrayList <IEmprestavel> getEmprestimos() throws ArrayVaziaException {
		 try {
			 return repositorio.getTodos();
		 } catch (ArrayVaziaException e) {
			 throw e;
		 }
	 }
	 
	 public void atualizarBD() {
		// ToDo: fazer a função
	 }
	 public void inicializarDados() {
		 try {
			 ResultSet rs = bdManager.listarEmprestavel();
		 } catch (SQLException e) {
			 System.out.print(e);
		 }
	 }
	 
	 public void novoEmprestimo(IEmprestavel item, String nome, int ano, Month mes, int dia) throws ArrayCheiaException, ElementoExistenteException, EmprestimoException {
		 try {
			 LocalDate data = LocalDate.of(ano, mes, dia);
			 item.registrarEmprestimo(data, nome);
			 repositorio.inserirElemento(item);
		 } catch (Exception e) {
			 throw e;
		 }
	 }
	 
	 public void terminarEmprestimo(IEmprestavel item) throws ElementoInexistenteException, ArrayVaziaException, EmprestimoException{
		 remover(item);
		 item.registrarDevolucao();
	 }
	 
	 public long diasDeEmprestimo(IEmprestavel item) throws EmprestimoException {
		 return item.quantidadeDeDiasDesdeOEmprestimo();
	 }
	 
	public IEmprestavel retornarEmprestavelPorId(UUID id) throws ArrayVaziaException, ElementoInexistenteException {
		return ((RepositorioEmprestimo) repositorio).RetornarEmprestavelPorId(id);
	}
		
}
